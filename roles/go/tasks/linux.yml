---
- name: set desired go version to latest available
  set_fact:
    desired_version: "{{ lookup('url', 'https://golang.org/VERSION?m=text', split_lines=False) }}"
  when: version == "latest"

- name: set desired go version to provided version
  set_fact:
    desired_version: "go{{ version }}"
  when: version != "latest"

- name: check currently installed go version
  command: go version
  register: go_version
  ignore_errors: yes

- name: set current version
  set_fact:
    current_version: "{{ go_version.stdout.split(' ')[2] }}"
  when: go_version.failed == false

- name: bail out if desired version already installed
  meta: end_host
  when: (current_version is defined) and (desired_version == current_version)

- name: remove current go symlink
  become: yes
  file:
    path: "{{ bindir }}/go"
    state: absent
  when: current_version is defined

- name: remove current gofmt symlink
  become: yes
  file:
    path: "{{ bindir }}/go"
    state: absent
  when: current_version is defined

- name: remove current version
  become: yes
  file:
    path: "{{ bindir }}/gofmt"
    state: absent
  when: current_version is defined

- name: download and extract archive
  become: yes
  unarchive:
    src: "https://golang.org/dl/{{ desired_version }}.{{ ansible_system | lower }}-{{ arch }}.tar.gz"
    dest: "{{ prefix }}"
    remote_src: yes
    mode: u=rwx,g=rx,o=rx

- name: create go symlink
  become: yes
  file:
    src: "{{ prefix }}/go/bin/go"
    dest: "{{ bindir }}/go"
    state: link

- name: create gofmt symlink
  become: yes
  file:
    src: "{{ prefix }}/go/bin/gofmt"
    dest: "{{ bindir }}/gofmt"
    state: link
